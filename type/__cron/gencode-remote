#!/bin/sh -e
#
# 2011 Steven Armstrong (steven-cdist at armstrong.cc)
# 2013 Nico Schottelius (nico-cdist at schottelius.org)
# 2017 Daniel Heule (hda at sfs.biz)
# 2022 Dennis Camera (cdist at dtnr.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

breify() {
	# NOTE: imported from type/__package_apt/explorer/state
	# Convert arguments to a POSIX BRE-compatible form, i.e. escape special
	# characters (incl. delimiter)
	printf '%s' "$*" | sed -e 's/[].^$*\[]/\\&/g' -e 's:/:\\/:g'
}
quote() { printf '%s\n' "$*" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"; }

name=${__object_name:?}
user=$(cat "${__object:?}/parameter/user")
command=$(cat "${__object:?}/parameter/command")

if test -f "${__object:?}/parameter/raw_command"
then
	echo 'error: parameter --raw_command is not supported anymore.' >&2
	exit 1
elif test -f "${__object:?}/parameter/raw"
then
	read -r when <"${__object:?}/parameter/raw"
else
	read -r minute <"${__object:?}/parameter/minute"
	read -r hour <"${__object:?}/parameter/hour"
	if test -f "${__object:?}/parameter/day_of_month"
	then
		# deprecated name
		read -r day_of_month <"${__object:?}/parameter/day_of_month"
	else
		read -r day_of_month <"${__object:?}/parameter/day-of-month"
	fi
	read -r month <"${__object:?}/parameter/month"
	if test -f "${__object:?}/parameter/day_of_week"
	then
		# deprecated name
		read -r day_of_week <"${__object:?}/parameter/day_of_week"
	else
		read -r day_of_week <"${__object:?}/parameter/day-of-week"
	fi
	when="${minute} ${hour} ${day_of_month} ${month} ${day_of_week}"
fi

entry="${when} ${command}  # ${name}"

if test -s "${__object:?}/explorer/entry"
then
	if printf '%s\n' "${entry}" | cmp -s - "${__object:?}/explorer/entry"
	then
		state_is=present
	else
		state_is=modified
	fi
else
	state_is=absent
fi

state_should=$(cat "${__object:?}/parameter/state")

test "${state_is}" != "${state_should}" || exit 0

# NOTE: vixie cron, cronie, FreeBSD cron (and others?) add these "magic"
#       comments to the top of the crontab file:
#
#       # DO NOT EDIT THIS FILE - edit the master and reinstall.
#       # (/tmp/crontab.xii0AL installed on Wed Apr 13 13:04:43 2022)
#       # (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)
#
#       crontab -l usually removes these lines in its output, but some
#       implementations (e.g. some versions of Cronie) don't, leading to a
#       repitition of these lines on every change.
#
#       Also, OpenBSD/NetBSD cron uses magic comments of a different form.
comment_filter='^# *\(DO NOT EDIT THIS FILE\|(.* installed on \|(\(Cron\|Cronie\) version \)'

# NOTE: $!N makes sure that matching comment lines are only removed from the
#       beginning of the file.
# crontab_filter prints a command which when executed prints the current
# state of the crontab, but without automatic comments (cf. $comment_filter)
crontab_print_cmd="crontab -u $(quote "${user}") -l 2>/dev/null | sed -e $(quote "/${comment_filter}/d") -e '\$!N'"
crontab_update_cmd="crontab -u $(quote "${user}") -"

entry_filter_cmd="grep -v $(quote " # $(breify "${name}")\$")"

case ${state_should}
in
	(present)
		# NOTE: We need to lock against parallel execution with __cron because
		#       both types modify the same "file" and crontab(1) does not
		#       synchronization of its own.
		sed -e '/^#/d' -e '/^$/d' "${__type:?}/files/lock.sh"

		# add/replace crontab entry by removing entries with the given cdist tag
		# from crontab and appending a new line
		cat <<-CODE
		${crontab_update_cmd?} <<EOF
		\$(${crontab_print_cmd?} | ${entry_filter_cmd?})
		${entry?}
		EOF
		CODE
		;;
	(absent)
		# NOTE: We need to lock against parallel execution with __cron because
		#       both types modify the same "file" and crontab(1) does not
		#       synchronization of its own.
		sed -e '/^#/d' -e '/^$/d' "${__type:?}/files/lock.sh"

		printf '%s | %s | %s\n' \
			"${crontab_print_cmd?}" \
			"${entry_filter_cmd?}" \
			"${crontab_update_cmd?}"
		;;
	(*)
		printf 'Invalid --state: %s\n' "${state_should}" >&2
		exit 1
		;;
esac
